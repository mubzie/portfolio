@font-face {
  font-family: HelveticaNeueMediumExtended;
  src: url("/assets/typography/Helvetica-Neue/Helvetica-Neue-Medium-Extended.ttf");
}
@font-face {
  font-family: HelveticaNowText;
  src: url("/assets/typography/Helvetica-Now-Text/HelveticaNowText-Regular.otf");
}

// Defaults
$padding-web: 5em;
$padding-mobile: 2em;
$font-primary: HelveticaNeueMediumExtended;
$font-secondary: HelveticaNowText;

// Themes
$lightMode-bg-transparent: transparent;
$lightMode-bg: #ffffff;
$lightMode-color: #ffffff;
$lightMode-text: #000000;

$darkMode-bg-transparent: transparent;
$darkMode-bg: #000000;
$darkMode-color: #000000;
$darkMode-text: #dadada;

$lightMode-bg-invert: $darkMode-bg;
$lightMode-color-invert: $darkMode-color;
$lightMode-gray: #f5f5f5;
$lightMode-bg-lighten: lighten(
  $color: $lightMode-gray,
  $amount: 3%,
);
$lightMode-text-invert: $darkMode-text;
$lightMode-border: #f5f5f5;
$lightMode-wave-img: url("/imgs/black-overlay.svg");
$lightMode-filter: invert(0);

$darkMode-bg-invert: $lightMode-bg;
$darkMode-color-invert: $lightMode-color;
$darkMode-bg-lighten: #121212;
$darkMode-border: #454844;
$darkMode-text-invert: $lightMode-text;
$darkMode-wave-img: url("/imgs/white-overlay.svg");
$darkMode-filter: invert(1);

$primary-text: #828282;

// Create a app that handle Dark and light mode
$themes: (
  "default": (
    "bg": $darkMode-bg,
    "bg-transparent": $darkMode-bg-transparent,
    "bg-lighten": $darkMode-bg-lighten,
    "bg-invert": $darkMode-bg-invert,
    "text": $darkMode-text,
    "text-invert": $darkMode-text-invert,
    "text-secondary": $primary-text,
    "border": $darkMode-border,
    "color": $darkMode-color,
    "color-invert": $darkMode-color-invert,
    "wave-img": $darkMode-wave-img,
    "filter": $darkMode-filter,
  ),
  "light": (
    "bg": $lightMode-bg,
    "bg-transparent": $lightMode-bg-transparent,
    "bg-lighten": $lightMode-bg-lighten,
    "bg-invert": $lightMode-bg-invert,
    "text": $lightMode-text,
    "text-invert": $lightMode-text-invert,
    "text-secondary": $primary-text,
    "border": $lightMode-border,
    "color": $lightMode-color,
    "color-invert": $lightMode-color-invert,
    "wave-img": $lightMode-wave-img,
    "filter": $lightMode-filter,
  ),
);

/**
create a mixin that loop through the theme map and create scss styles for each theme
*/

// For module css files
@mixin themify($themes: $themes) {
  @each $theme, $map in $themes {
    :global(.theme-#{$theme}) & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      transition: all 400ms linear;
      $theme-map: null !global;
    }
  }
}

//  for Global file, thats not using module
@mixin themifyGlobal($themes: $themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      transition: all 400ms linear;
      @content;
      $theme-map: null !global;
    }
  }
}

// function that gets the currentt theme value
// Note: Can only be used inside a themify or themifyGlobal Mixin
@function getThemeValue($key) {
  @return map-get($theme-map, $key);
}
